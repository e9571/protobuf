// Code generated by protoc-gen-go. DO NOT EDIT.
// source: msg.proto

package msg

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//请求
type ChannelRq struct {
	Send                 string   `protobuf:"bytes,1,opt,name=send,proto3" json:"send,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelRq) Reset()         { *m = ChannelRq{} }
func (m *ChannelRq) String() string { return proto.CompactTextString(m) }
func (*ChannelRq) ProtoMessage()    {}
func (*ChannelRq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{0}
}

func (m *ChannelRq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelRq.Unmarshal(m, b)
}
func (m *ChannelRq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelRq.Marshal(b, m, deterministic)
}
func (m *ChannelRq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelRq.Merge(m, src)
}
func (m *ChannelRq) XXX_Size() int {
	return xxx_messageInfo_ChannelRq.Size(m)
}
func (m *ChannelRq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelRq.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelRq proto.InternalMessageInfo

func (m *ChannelRq) GetSend() string {
	if m != nil {
		return m.Send
	}
	return ""
}

//响应
type ChannelRp struct {
	Recv                 string   `protobuf:"bytes,1,opt,name=recv,proto3" json:"recv,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelRp) Reset()         { *m = ChannelRp{} }
func (m *ChannelRp) String() string { return proto.CompactTextString(m) }
func (*ChannelRp) ProtoMessage()    {}
func (*ChannelRp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c06e4cca6c2cc899, []int{1}
}

func (m *ChannelRp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelRp.Unmarshal(m, b)
}
func (m *ChannelRp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelRp.Marshal(b, m, deterministic)
}
func (m *ChannelRp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelRp.Merge(m, src)
}
func (m *ChannelRp) XXX_Size() int {
	return xxx_messageInfo_ChannelRp.Size(m)
}
func (m *ChannelRp) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelRp.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelRp proto.InternalMessageInfo

func (m *ChannelRp) GetRecv() string {
	if m != nil {
		return m.Recv
	}
	return ""
}

func init() {
	proto.RegisterType((*ChannelRq)(nil), "msg.ChannelRq")
	proto.RegisterType((*ChannelRp)(nil), "msg.ChannelRp")
}

func init() { proto.RegisterFile("msg.proto", fileDescriptor_c06e4cca6c2cc899) }

var fileDescriptor_c06e4cca6c2cc899 = []byte{
	// 116 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcc, 0x2d, 0x4e, 0xd7,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xce, 0x2d, 0x4e, 0x57, 0x92, 0xe7, 0xe2, 0x74, 0xce,
	0x48, 0xcc, 0xcb, 0x4b, 0xcd, 0x09, 0x2a, 0x14, 0x12, 0xe2, 0x62, 0x29, 0x4e, 0xcd, 0x4b, 0x91,
	0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x91, 0x15, 0x14, 0x80, 0x14, 0x14, 0xa5, 0x26,
	0x97, 0xc1, 0x14, 0x80, 0xd8, 0x46, 0x26, 0x5c, 0x2c, 0x2e, 0x89, 0x25, 0x89, 0x42, 0x3a, 0x5c,
	0x5c, 0xee, 0xa9, 0x25, 0x50, 0xb5, 0x42, 0x7c, 0x7a, 0x20, 0x8b, 0xe0, 0x46, 0x4b, 0xa1, 0xf2,
	0x0b, 0x92, 0xd8, 0xc0, 0x6e, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xfd, 0xda, 0x33, 0x5a,
	0x90, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DataClient is the client API for Data service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataClient interface {
	GetChannel(ctx context.Context, in *ChannelRq, opts ...grpc.CallOption) (*ChannelRp, error)
}

type dataClient struct {
	cc grpc.ClientConnInterface
}

func NewDataClient(cc grpc.ClientConnInterface) DataClient {
	return &dataClient{cc}
}

func (c *dataClient) GetChannel(ctx context.Context, in *ChannelRq, opts ...grpc.CallOption) (*ChannelRp, error) {
	out := new(ChannelRp)
	err := c.cc.Invoke(ctx, "/msg.Data/GetChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServer is the server API for Data service.
type DataServer interface {
	GetChannel(context.Context, *ChannelRq) (*ChannelRp, error)
}

// UnimplementedDataServer can be embedded to have forward compatible implementations.
type UnimplementedDataServer struct {
}

func (*UnimplementedDataServer) GetChannel(ctx context.Context, req *ChannelRq) (*ChannelRp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannel not implemented")
}

func RegisterDataServer(s *grpc.Server, srv DataServer) {
	s.RegisterService(&_Data_serviceDesc, srv)
}

func _Data_GetChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelRq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Data/GetChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetChannel(ctx, req.(*ChannelRq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Data_serviceDesc = grpc.ServiceDesc{
	ServiceName: "msg.Data",
	HandlerType: (*DataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChannel",
			Handler:    _Data_GetChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "msg.proto",
}
